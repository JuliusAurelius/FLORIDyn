function [powerHist,OP,T,UF,Sim] = main2()

addpath('./WindField')
addpath('./Controller')
addpath('./ObservationPoints')
addpath('./WakeModel')
addpath('./Visulization')
addpath('./TurbineData')
addpath('./Misc')

warning('off','MATLAB:scatteredInterpolant:DupPtsAvValuesWarnId')
warning('off','MATLAB:scatteredInterpolant:InterpEmptyTri2DWarnId')
%% Load Layout
%   Load the turbine configuration (position, diameter, hub height,...) the
%   power constants (Efficiency, p_p), data to connect wind speed and
%   power / thrust coefficient and the configuration of the OP-chains:
%   relative position, weights, lengths etc.
%
%   Currently implemented Layouts
%       'twoDTU10MW_Maarten'    -> two turbines at 900m distance
%       'nineDTU10MW_Maatren'   -> nine turbines in a 3x3 grid, 900m dist.
%  
%   Chain length & the number of chains can be set as extra vars, see 
%   comments in the function for additional info.
[T,fieldLims,Pow,VCtCp,chain] = loadLayout('twoDTU10MW_Maarten'); %#ok<ASGLU>

%% Load the environment
%   U provides info about the wind: Speed(s), direction(s), changes.
%   I does the same, but for the ambient turbulence, UF hosts constant
%   used for the wind field interpolation, the air density, atmospheric
%   stability etc. The Sim struct holds info about the simulation: Duration
%   time step, various settings. See comments in the function for 
%   additional info.
% 
%   Currently implemented scenarios:
%       'const'     -> Constant wind speed, direction and amb. turbulence
%       '+60DegChange'              ->
%       'Propagating40DegChange'    ->
%'+60DegChange''const''Propagating40DegChange'
[U, I, UF, Sim] = loadWindField('Propagating40DegChange',... 
    'SimDuration',1000,...
    'FreeSpeed',false,...
    'Interaction',true,...
    'posMeasFactor',2000);

onlineVis = true;

%% Create starting OPs and build opList
[OP, chain] = assembleOPList(chain,T,'sunflower');

%% Preparation for Simulation
% Online visulization script (1/2)
if onlineVis
    OnlineVis_Start;
end

% Check if field variables are changing over Simulation time
UangVar = size(U.ang,1)>1;
UabsVar = size(U.abs,1)>1;
IVar    = size(I.val,1)>1;
U_ang   = U.ang(1,:);
U_abs   = U.abs(1,:);
I_val   = I.val(1,:);

%clc
fprintf(' ============ FLORIDyn Progress ============ \n');
fprintf(['  Number of turbines  : ' num2str(length(T.D)) '\n']);
dispstat('','init')

% Preallocate the power history
powerHist = zeros(length(T.D),Sim.NoTimeSteps);

% Set free wind speed as starting wind speed for the turbines
T.U = getWindVec4(T.pos, U_abs, U_ang, UF);
T.u = sqrt(T.U(:,1).^2+T.U(:,2).^2);
i = 1; % Maybe needed for Controlle Script
ControllerScript;
OP.Ct = T.Ct(OP.t_id);
%% Start simulation
for i = 1:Sim.NoTimeSteps
    tic;
    % Update measurements if they are variable
    if UangVar; U_ang = U.ang(i,:); end
    if UabsVar; U_abs = U.abs(i,:); end
    if IVar;    I_val = I.val(i,:); end
    
    %================= CONTROLLER & POWER CALCULATION ====================%
    % Update Turbine data to get controller input
    T.U = getWindVec4(T.pos, U_abs, U_ang, UF);
    
    % Set Ct/Cp and calculate the power output
    ControllerScript;
    
    %================= INSERT NEW OBSERVATION POINTS =====================%
    OP = initAtRotorPlane(OP, chain, T);
    
    %====================== INCREMENT POSITION ===========================%
    % Update wind dir and speed along with amb. turbulence intensity
    OP.U = getWindVec4(OP.pos, U_abs, U_ang, UF);
    OP.I = getAmbientTurbulence(OP.pos, UF.IR, I_val, UF.Res, UF.lims);
    
    % Save old position for plotting if needed
    if onlineVis; OP_pos_old = OP.pos;end %#ok<NASGU>
    
    % Calculate the down and crosswind steps along with the windspeed at
    % the turbine rotor planes
    [OP, T]=makeStep2(OP, chain, T, Sim);
    
    % Increment the index of the chain starting entry
    chain.List = shiftChainList(chain.List);
    
    %===================== ONLINE VISULIZATION ===========================%
    % Script (2/2)
    if onlineVis
        OnlineVis_plot;
        if i == Sim.NoTimeSteps
            hold off
            PostSimVis;
        end
    end
    
    ProgressScript;
end
%% Store power output together with time line
powerHist = [Sim.TimeSteps',powerHist'];
end
%% ===================================================================== %%
% = Reviewed: 2020.09.30 (yyyy.mm.dd)                                   = %
% === Author: Marcus Becker                                             = %
% == Contact: marcus.becker.mail@gmail.com                              = %
% ======================================================================= %